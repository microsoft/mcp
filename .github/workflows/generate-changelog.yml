name: Generate Changelog

on:
  workflow_dispatch:
    inputs:
      since:
        description: 'Generate changelog since this tag/commit (optional)'
        required: false
        type: string
      unreleased:
        description: 'Include unreleased changes'
        required: false
        type: boolean
        default: true

permissions:
  contents: write
  pull-requests: write

jobs:
  generate-changelog:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install git-cliff
        run: |
          curl -LsSf https://github.com/orhun/git-cliff/releases/latest/download/git-cliff-x86_64-unknown-linux-gnu.tar.gz | tar xzf - -C /usr/local/bin

      - name: Create git-cliff configuration
        run: |
          cat > cliff.toml << 'EOF'
          [changelog]
          # changelog header
          header = """
          # Changelog
          
          All notable changes to this project will be documented in this file.
          
          The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
          and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).
          
          """
          # template for the changelog body
          body = """
          {% if version %}\
              ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
          {% else %}\
              ## [Unreleased]
          {% endif %}\
          {% for group, commits in commits | group_by(attribute="group") %}
              ### {{ group | striptags | trim | upper_first }}
              {% for commit in commits %}
                  - {% if commit.scope %}**{{commit.scope}}**: {% endif %}\
                      {{ commit.message | upper_first }}\
                      {% if commit.links %} ({% for link in commit.links %}[{{link.text}}]({{link.href}}){% if not loop.last %}, {% endif %}{% endfor %}){% endif %}
              {% endfor %}
          {% endfor %}\
          
          {% if github.contributors | filter(attribute="is_first_time", value=true) | length != 0 %}
              ### Contributors
              
              Thanks to all the contributors who made this release possible:
              
              {% for contributor in github.contributors | filter(attribute="is_first_time", value=true) %}
                  - [@{{ contributor.username }}](https://github.com/{{ contributor.username }}) - *first-time contributor* 🎉
              {% endfor %}
              {% for contributor in github.contributors | filter(attribute="is_first_time", value=false) %}
                  - [@{{ contributor.username }}](https://github.com/{{ contributor.username }})
              {% endfor %}
          {% endif %}\
          
          """
          # remove the leading and trailing whitespace from the template
          trim = true
          # changelog footer
          footer = """
          ---
          
          ## Previous Releases
          
          For release history, please refer to the individual server changelogs:
          - [Azure MCP Server CHANGELOG](./servers/Azure.Mcp.Server/CHANGELOG.md)
          - [Template MCP Server CHANGELOG](./servers/Template.Mcp.Server/CHANGELOG.md)
          """
          
          [git]
          # parse the commits based on https://www.conventionalcommits.org
          conventional_commits = true
          # filter out commits that are not conventional
          filter_unconventional = false
          # process each line of a commit as an individual commit
          split_commits = false
          # regex for preprocessing the commit messages
          commit_preprocessors = [
              # Replace issue numbers with links
              { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](https://github.com/microsoft/mcp/issues/${2}))"},
          ]
          # regex for parsing and grouping commits
          commit_parsers = [
              { message = "^feat", group = "<!-- 0 -->🚀 Features"},
              { message = "^fix", group = "<!-- 1 -->🐛 Bug Fixes"},
              { message = "^doc", group = "<!-- 3 -->📚 Documentation"},
              { message = "^perf", group = "<!-- 4 -->⚡ Performance"},
              { message = "^refactor", group = "<!-- 2 -->🚜 Refactor"},
              { message = "^style", group = "<!-- 5 -->🎨 Styling"},
              { message = "^test", group = "<!-- 6 -->🧪 Testing"},
              { message = "^chore\\(release\\): prepare for", skip = true},
              { message = "^chore\\(deps.*\\)", skip = true},
              { message = "^chore\\(pr\\)", skip = true},
              { message = "^chore\\(pull\\)", skip = true},
              { message = "^chore|^ci", group = "<!-- 7 -->⚙️ Miscellaneous Tasks"},
              { body = ".*security", group = "<!-- 8 -->🛡️ Security"},
              { message = "^revert", group = "<!-- 9 -->◀️ Revert"},
          ]
          # protect breaking changes from being skipped due to matching a skipping commit_parser
          protect_breaking_commits = false
          # filter out commits that are not matched by commit parsers
          filter_commits = false
          # regex for matching git tags
          tag_pattern = "v[0-9].*"
          # regex for skipping tags
          skip_tags = "v0.1.0-beta.1"
          # regex for ignoring tags
          ignore_tags = ""
          # sort the tags topologically
          topo_order = false
          # sort the commits inside sections by oldest/newest order
          sort_commits = "oldest"
          # limit the number of commits included in the changelog.
          # limit_commits = 42
          
          [remote.github]
          owner = "microsoft"
          repo = "mcp"
          token = "${{ secrets.GITHUB_TOKEN }}"
          EOF

      - name: Generate changelog
        run: |
          # Generate changelog based on inputs
          if [ "${{ github.event.inputs.since }}" != "" ]; then
            since_arg="--include-path '*' --since ${{ github.event.inputs.since }}"
          else
            since_arg=""
          fi
          
          if [ "${{ github.event.inputs.unreleased }}" = "true" ]; then
            unreleased_arg="--unreleased"
          else
            unreleased_arg=""
          fi
          
          git-cliff --config cliff.toml $since_arg $unreleased_arg --output CHANGELOG.md

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "docs: update CHANGELOG.md with generated entries"
          title: "📝 Update CHANGELOG.md with generated entries"
          body: |
            This PR updates the CHANGELOG.md file with automatically generated entries based on commit messages.
            
            The changelog is generated using git-cliff and follows conventional commit patterns.
            
            Generated with inputs:
            - Since: ${{ github.event.inputs.since || 'beginning' }}
            - Include unreleased: ${{ github.event.inputs.unreleased }}
          branch: update-changelog-automated
          base: main