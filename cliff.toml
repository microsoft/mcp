[changelog]
# changelog header
header = """
# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

"""
# template for the changelog body
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [Unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits %}
        - {% if commit.scope %}**{{commit.scope}}**: {% endif %}\
            {{ commit.message | upper_first }}\
            {% if commit.links %} ({% for link in commit.links %}[{{link.text}}]({{link.href}}){% if not loop.last %}, {% endif %}{% endfor %}){% endif %}
    {% endfor %}
{% endfor %}\

{% if github.contributors | filter(attribute="is_first_time", value=true) | length != 0 %}
    ### Contributors 👥
    
    Thanks to all the contributors who made this release possible:
    
    {% for contributor in github.contributors | filter(attribute="is_first_time", value=true) %}
        - [@{{ contributor.username }}](https://github.com/{{ contributor.username }}) - *first-time contributor* 🎉
    {% endfor %}
    {% for contributor in github.contributors | filter(attribute="is_first_time", value=false) %}
        - [@{{ contributor.username }}](https://github.com/{{ contributor.username }})
    {% endfor %}
{% endif %}\

"""
# remove the leading and trailing whitespace from the template
trim = true
# changelog footer
footer = """
---

## Previous Releases

For release history, please refer to the individual server changelogs:
- [Azure MCP Server CHANGELOG](./servers/Azure.Mcp.Server/CHANGELOG.md)
- [Template MCP Server CHANGELOG](./servers/Template.Mcp.Server/CHANGELOG.md)

---

## Contributors 👥

We appreciate all the contributors who have helped improve this project! Contributors are automatically recognized in each release.

<!-- Contributors will be automatically updated by GitHub Actions -->
"""

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out commits that are not conventional
filter_unconventional = false
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
    # Replace issue numbers with links
    { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](https://github.com/microsoft/mcp/issues/${2}))"},
    # Replace PR numbers with links
    { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](https://github.com/microsoft/mcp/pull/${2}))"},
]
# regex for parsing and grouping commits
commit_parsers = [
    { message = "^feat", group = "<!-- 0 -->🚀 Features"},
    { message = "^fix", group = "<!-- 1 -->🐛 Bug Fixes"},
    { message = "^doc", group = "<!-- 3 -->📚 Documentation"},
    { message = "^perf", group = "<!-- 4 -->⚡ Performance"},
    { message = "^refactor", group = "<!-- 2 -->🚜 Refactor"},
    { message = "^style", group = "<!-- 5 -->🎨 Styling"},
    { message = "^test", group = "<!-- 6 -->🧪 Testing"},
    { message = "^chore\\(release\\): prepare for", skip = true},
    { message = "^chore\\(deps.*\\)", skip = true},
    { message = "^chore\\(pr\\)", skip = true},
    { message = "^chore\\(pull\\)", skip = true},
    { message = "^chore|^ci", group = "<!-- 7 -->⚙️ Miscellaneous Tasks"},
    { body = ".*security", group = "<!-- 8 -->🛡️ Security"},
    { message = "^revert", group = "<!-- 9 -->◀️ Revert"},
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out commits that are not matched by commit parsers
filter_commits = false
# regex for matching git tags
tag_pattern = ".*"
# regex for skipping tags
skip_tags = ""
# regex for ignoring tags
ignore_tags = ""
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"

[remote.github]
owner = "microsoft"
repo = "mcp"