parameters:
# required matrix parameters
- name: UsePlatformContainer
  type: boolean
- name: OSName
  type: string
- name: Matrix
  type: object
- name: DependsOn
  type: string
- name: CloudConfig
  type: object
- name: TestTimeoutInMinutes
  type: number
- name: ServerName
  type: string

jobs:
- job: Verify_Packages_${{ parameters.OSName }}
  displayName: "Verify Packages"
  dependsOn:
  - ${{ parameters.DependsOn }}
  strategy:
    matrix: $[ ${{ parameters.Matrix }} ]
  pool:
    name: $(Pool)
    ${{ if eq(parameters.OSName, 'macOS') }}:
      vmImage: $(OSVmImage)
    ${{ else }}:
      image: $(OSVmImage)
    os: ${{ parameters.OSName }}

  steps:
  - checkout: self

  - download: current
    displayName: Download artifacts

  - task: UseDotNet@2
    displayName: "Use .NET SDK from global.json"
    retryCountOnTaskFailure: 3
    inputs:
      useGlobalJson: true

  - task: NodeTool@0
    displayName: "Use Node.js 20.x"
    inputs:
      versionSpec: 20.x

  - pwsh: |
      # Verify the packages created in the sign and pack stage
      . $(Build.SourcesDirectory)/eng/scripts/McpServerSmokeTests.ps1

      Write-Host "${{ parameters.ServerName }}"
      Write-Host "${{ parameters.OSName }}"
      Write-Host "$(Architecture)"
      Get-ChildItem "$(Pipeline.Workspace)"
      Get-ChildItem "$(Pipeline.Workspace)/packages_nuget_signed" -Recurse
      Get-ChildItem "$(Pipeline.Workspace)/packages_npm" -Recurse

      $hasFailures = Validate-Nuget-Packages -ServerName ${{ parameters.ServerName }} -ArtifactsPath "$(Pipeline.Workspace)/packages_nuget_signed"
      $hasFailures = $hasFailures -or (Validate-Npm-Packages -ArtifactsPath "$(Pipeline.Workspace)/packages_npm" -TargetOs ${{ parameters.OSName }} -TargetArch $(Architecture) -WorkingDirectory "$(Agent.TempDirectory)")
      if ($hasFailures) {
        exit 1
      }
    displayName: 'Verify npm and nuget packages'
