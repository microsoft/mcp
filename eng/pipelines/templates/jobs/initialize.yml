parameters:
- name: ServerName
  type: string
- name: PublishTarget
  type: string
- name: IncludeNative
  type: boolean
- name: IsTestPipeline
  type: boolean

jobs:
- job: Initialize
  timeoutInMinutes: 90
  steps:
  - checkout: self
    fetchDepth: 0

  - task: PowerShell@2
    displayName: "Set PR skip job variables"
    name: SetPRSkipJobVariables
    condition: eq(variables['Build.Reason'], 'PullRequest')
    inputs:
      pwsh: true
      targetType: 'inline'
      script: |
        # Set of files that don't require build or test when changed
        $skipFiles = @(
          'CHANGELOG.md',
          'README.md',
          'SUPPORT.md',
          'TROUBLESHOOTING.md',
          'CONTRIBUTING.md',
          'CODE_OF_CONDUCT.md',
          'SECURITY.md',
          'NOTICE.txt',
          'LICENSE'
        )

        # Set of directories that don't require build or test when changed
        $skipDirectories = @(
          '.github/',
          'eng/common/'
        )

        $skipBuildAndTest = $true

        $changedFilesScriptPath = "$(Build.SourcesDirectory)/eng/common/scripts/get-changedfiles.ps1"
        $changedFiles = & $changedFilesScriptPath -DiffFilterType ''

        if ($changedFiles) {
          $changedFiles | ForEach-Object {
            Write-Host "Checking file: $_"
            $fileName = [System.IO.Path]::GetFileName($_)
            $isSkipFile = $skipFiles -contains $fileName

            $normalizedFile = $_ -replace '\\', '/'
            $isInSkipDirectory = $false
            foreach ($dir in $skipDirectories) {
              if ($normalizedFile.StartsWith($dir, [System.StringComparison]::OrdinalIgnoreCase)) {
                $isInSkipDirectory = $true
                break
              }
            }

            Write-Host "  -> File: $fileName, IsSkipFile: $isSkipFile, IsInSkipDir: $isInSkipDirectory"
            if (-not $isSkipFile -and -not $isInSkipDirectory) {
              $skipBuildAndTest = $false
              Write-Host "  -> This file $_ requires build and test!"
              return
            }
          }
        }
        
        if ($skipBuildAndTest) {
          Write-Host "##vso[task.setvariable variable=SkipBuildJob;isOutput=true]true"
          Write-Host "##vso[task.setvariable variable=SkipLiveTestJob;isOutput=true]true"
          Write-Host "SkipBuildJob set to: true"
          Write-Host "SkipLiveTestJob set to: true"
        } else {
          Write-Host "This PR contains files that require build and/or test."
        }
        
  - task: UseDotNet@2
    displayName: "Use .NET SDK from global.json"
    retryCountOnTaskFailure: 3
    inputs:
      useGlobalJson: true

  - pwsh: |
      Write-Host "Attaching build reason string to the build for additional tag generation."
      @('$(Build.Reason)') | ConvertTo-Json -AsArray | Out-File -FilePath $(System.DefaultWorkingDirectory)/build-reason.json -Encoding utf8
      Write-Host '##vso[task.addattachment type=AdditionalTags;name=AdditionalTags;]$(System.DefaultWorkingDirectory)/build-reason.json'
    displayName: Tag build reason

  - task: Powershell@2
    displayName: "Create build info file"
    name: CreateBuildInfo
    inputs:
      pwsh: true
      filePath: $(Build.SourcesDirectory)/eng/scripts/New-BuildInfo.ps1
      arguments: >
        -PublishTarget '${{ parameters.PublishTarget }}'
        -BuildId '$(Build.BuildId)'
        -OutputPath '$(Build.ArtifactStagingDirectory)/build_info.json'
        -ServerName '${{ parameters.ServerName }}'
        -IncludeNative:$${{ parameters.IncludeNative }}
        -TestPipeline:$${{ parameters.IsTestPipeline }}

  - template: /eng/common/pipelines/templates/steps/publish-1es-artifact.yml
    parameters:
      ArtifactPath: $(Build.ArtifactStagingDirectory)
      ArtifactName: build_info
