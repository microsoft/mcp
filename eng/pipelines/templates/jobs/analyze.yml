jobs:
- job: Analyze
  condition: and(succeededOrFailed(), ne(variables['Skip.Analyze'], 'true'))
  timeoutInMinutes: 120
  dependsOn: []
  steps:
  - checkout: self
    fetchDepth: 0

  - task: UseDotNet@2
    displayName: "Use .NET SDK from global.json"
    retryCountOnTaskFailure: 3
    inputs:
      useGlobalJson: true

  - task: UseDotNet@2
    displayName: "Use .NET SDK 9.0.x"
    retryCountOnTaskFailure: 3
    inputs:
      packageType: sdk
      version: 9.0.x

  - task: Powershell@2
    displayName: "Run source analysis"
    inputs:
      pwsh: true
      filePath: $(Build.SourcesDirectory)/eng/scripts/Analyze-Code.ps1

  # Run AOT analysis only on Linux x64
  - template: /eng/pipelines/templates/steps/analyze-aot-compact.yml
    parameters:
      runtime: 'linux-x64'
      sourceDirectory: $(Build.SourcesDirectory)

  - template: /eng/common/pipelines/templates/steps/check-spelling.yml

  - template: /eng/common/pipelines/templates/steps/verify-links.yml
    parameters:
      Condition: succeededOrFailed()
      Directory: ""
      CheckLinkGuidance: $true
      ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
        Urls: (eng/common/scripts/get-markdown-files-from-changed-files.ps1)

  - pwsh: |
      # Verify that the package README.md files do not contain invalid headers or comment annotations
      $hasFailures = & "$(Build.SourcesDirectory)/eng/scripts/Process-PackageReadMe.ps1" -Command "validate-all"
      if ($hasFailures) {
        exit 1
      }
    displayName: 'Validate Package README.md files'
    condition: succeededOrFailed()

  - task: Powershell@2
    displayName: "Build Azure MCP Server for metadata verification"
    inputs:
      pwsh: true
      workingDirectory: $(Build.SourcesDirectory)
      targetType: inline
      script: |
        Write-Host "Building Azure.Mcp.Server for metadata verification..."
        dotnet build "$(Build.SourcesDirectory)/servers/Azure.Mcp.Server/src/Azure.Mcp.Server.csproj" -c Debug
        if ($LASTEXITCODE -ne 0) {
          Write-Error "Build failed"
          exit $LASTEXITCODE
        }
        
        # Determine the correct executable name based on OS
        $exeName = if ($IsWindows) { "azmcp.exe" } else { "azmcp" }
        $exePath = "$(Build.SourcesDirectory)/servers/Azure.Mcp.Server/src/bin/Debug/net9.0/$exeName"
        
        Write-Host "Checking for executable at: $exePath"
        if (-not (Test-Path $exePath)) {
          Write-Error "Executable not found at expected path: $exePath"
          Get-ChildItem "$(Build.SourcesDirectory)/servers/Azure.Mcp.Server/src/bin" -Recurse | Select-Object FullName
          exit 1
        }
        Write-Host "âœ“ Executable found at: $exePath"
    condition: succeededOrFailed()

  - task: Powershell@2
    displayName: "Verify AzCommands Metadata is up-to-date"
    inputs:
      pwsh: true
      workingDirectory: $(Build.SourcesDirectory)
      targetType: inline
      script: |
        # Determine the correct executable name based on OS
        $exeName = if ($IsWindows) { "azmcp.exe" } else { "azmcp" }
        $azmcpPath = "$(Build.SourcesDirectory)/servers/Azure.Mcp.Server/src/bin/Debug/net9.0/$exeName"
        $docsPath = "$(Build.SourcesDirectory)/servers/Azure.Mcp.Server/docs/azmcp-commands.md"
        
        Write-Host "Running verification with:"
        Write-Host "  AzmcpPath: $azmcpPath"
        Write-Host "  DocsPath: $docsPath"
        
        & "$(Build.SourcesDirectory)/eng/scripts/Verify-AzCommandsMetadata.ps1" -AzmcpPath $azmcpPath -DocsPath $docsPath
        
        if ($LASTEXITCODE -ne 0) {
          exit $LASTEXITCODE
        }
    condition: succeededOrFailed()
