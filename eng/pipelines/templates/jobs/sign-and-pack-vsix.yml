parameters:
- name: DependsOn
  type: object
  default: []
- name: ServerName
  type: string

jobs:
- job: SignAndPackVSIX
  displayName: "Sign and Pack VSIX"
  dependsOn: ${{ parameters.DependsOn }}
  condition: and(succeeded(), ne(variables['NoPackagesChanged'], 'true'))
  steps:
  - checkout: self

  # Download the signed MCP server binaries for this OS
  - download: current
    artifact: $(PipelineArtifactName)_signed
    displayName: "Download signed MCP server binaries"

  - task: NodeTool@0
    displayName: "Use Node.js 20.x"
    inputs:
      versionSpec: 20.x

  # --- VS Code Extension Packaging Steps ---

  - pwsh: >
      eng/scripts/Pack-Vsix.ps1
      -ServerName '${{ parameters.ServerName }}'
      -ArtifactsPath '$(Pipeline.Workspace)/$(PipelineArtifactName)_signed'
      -OutputPath '$(Build.ArtifactStagingDirectory)'
    displayName: "Copy signed MCP server binaries to VSIX"

  - template: pipelines/steps/azd-vscode-signing.yml@azure-sdk-build-tools
    parameters:
      Path: $(Build.ArtifactStagingDirectory)
      Pattern: '**/*.signature.p7s'

  - template: /eng/common/pipelines/templates/steps/publish-1es-artifact.yml
    parameters:
      ArtifactPath: $(Build.ArtifactStagingDirectory)
      ArtifactName: vsix_packages_signed

- job: VerifyVSIXSigning
  displayName: "Verify VSIX Signing"
  dependsOn: SignAndPackVSIX
  pool:
    name: $(WINDOWSPOOL) # Signing verification must happen on windows
    image: $(WINDOWSVMIMAGE)
    os: windows
  variables:
  - template: /eng/pipelines/templates/variables/image.yml
  - template: /eng/pipelines/templates/variables/globals.yml
  steps:
  - checkout: none
  - download: current
    artifact: vsix_$(PipelineArtifactName)_signed
    displayName: "Download signed MCP server VSIX files"
  - pwsh: |
      Write-Host "Verifying signing for win-x64 and win-arm64 VSIX files..."
      $allSigned = $true
      $signedVsixFiles = Get-ChildItem -Path '$(Pipeline.Workspace)/vsix_$(PipelineArtifactName)_signed/**/win-*' -Recurse -Include "*.signature.p7s"
      foreach ($vsix in $signedVsixFiles) {
          if ((Get-AuthenticodeSignature -FilePath $vsix.FullName).Status -ne 'Valid') {
              Write-Host "VSIX file $($vsix.FullName) is NOT signed correctly."
              $allSigned = $false
          }
          else {
              Write-Host "VSIX file $($vsix.FullName) is signed correctly."
          }
      }
      if (-not $allSigned) {
          Write-Error "One or more VSIX files are not signed correctly."
          exit 1
      }
    displayName: "Verify VSIX Signing"
