parameters:
- name: ContainerRegistry
  type: string
- name: DeploymentEnvironment
  type: string
- name: ServerName
  type: string
- name: DependsOn
  type: object

jobs:
- job: PublishACR
  displayName: "Publish to ACR"
  condition: and(succeeded(), ne(variables['Skip.PublishPackage'], 'true'))
  dependsOn: ${{ parameters.DependsOn }}

  templateContext:
    inputs:
    - input: pipelineArtifact
      artifactName: build_info
      targetPath: $(Pipeline.Workspace)/build_info
    - input: pipelineArtifact
      artifactName: docker_staged
      targetPath: $(Pipeline.Workspace)/docker_staged

    outputs:
    - output: containerImage
      image: image:tag
      remoteImage:
      - ${{ format('{0}.azurecr.io', parameters.ContainerRegistry) }}/${{ format('{0}/{1}', parameters.DeploymentEnvironment, '$(DockerImageName)')}}:$(DockerImageVersion)
      - ${{ format('{0}.azurecr.io', parameters.ContainerRegistry) }}/${{ format('{0}/{1}', parameters.DeploymentEnvironment, '$(DockerImageName)')}}:latest

  timeoutInMinutes: 120
  pool:
    name: azsdk-pool
    image: ubuntu-24.04
    os: linux

  steps:
  - task: Powershell@2
    displayName: 'Set Docker Variables'
    name: SetVariables
    inputs:
      targetType: 'inline'
      script: |
        $buildInfo = Get-Content -Raw -Path "$(Pipeline.Workspace)/build_info/build_info.json" | ConvertFrom-Json
        $serverInfo = $buildInfo.servers | Where-Object { $_.Name -eq $env:SERVER_NAME } | Select-Object -First 1

        if (-not $serverInfo) {
            Write-Error "Server with name '$env:SERVER_NAME' not found in buildInfo.json"
            exit 1
        }

        $imageName = $serverInfo.dockerImageName
        Write-Host "Setting variable DockerImageName to $imageName"
        Write-Host "##vso[task.setvariable variable=DockerImageName;isOutput=true]$imageName"

        $version = $serverInfo.version
        Write-Host "Setting variable DockerImageVersion to $version"
        Write-Host "##vso[task.setvariable variable=DockerImageVersion;isOutput=true]$version"

        $cliName = $serverInfo.cliName
        $extension = $serverInfo.extension
        $executableName = "$cliName$extension"
        Write-Host "Setting variable DockerExecutableName to $executableName"
        Write-Host "##vso[task.setvariable variable=DockerExecutableName]$executableName"
    env:
      SERVER_NAME: ${{ parameters.ServerName }}

  - task: AzureCLI@2
    condition: succeeded()
    displayName: Login to ${{ parameters.ContainerRegistry }}
    inputs:
      azureSubscription: "Azure SDK Engineering System"
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        az acr login --name ${{ parameters.ContainerRegistry }}

  - task: 1ES.BuildContainerImage@1
    displayName: Build Docker Image
    inputs:
      path: '$(Pipeline.Workspace)/docker_staged/${{ parameters.ServerName }}/linux-x64'
      image: image:tag
      buildArguments: >
        --build-arg PUBLISH_DIR="dist"
      enableNetwork: true
      useBuildKit: true
