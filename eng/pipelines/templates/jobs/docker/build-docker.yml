parameters:
- name: DependsOn
  type: object
- name: ServerBuildMatrix
  type: object

jobs:
- job: BuildDockerImages
  displayName: "Build Docker Images"
  dependsOn: ${{ parameters.DependsOn }}
  condition: and(succeeded(), ne(${{ parameters.ServerBuildMatrix }}, '{}'))
  strategy:
    matrix: $[ ${{ parameters.ServerBuildMatrix }}]
  pool:
    name: $(LINUXPOOL)
    image: $(LINUXVMIMAGE)
    os: linux

  steps:
  - checkout: self

  - download: current
    displayName: Download docker staging
    artifact: docker_staging

  - task: 1ES.BuildContainerImage@1
    displayName: "Building Docker image for $(CliName)"
    inputs:
      path: "$(Pipeline.Workspace)/docker_staging"
      image: "$(DockerLocalTag-$(CliName))"
      buildArguments: |
        --build-arg PUBLISH_DIR="$(ArtifactPath)/linux-x64/dist"
        --build-arg EXECUTABLE_NAME="$(DockerExecutableName-$(CliName))"
      enableNetwork: true
      useBuildKit: true

  - script: |
      set -euo pipefail
      echo "Capturing image digest for $(DockerLocalTag-$(CliName))"
      digest="$(docker inspect --format='{{index .Id}}' "$(DockerLocalTag-$(CliName))")"
      if [ -z "$digest" ]; then
        echo "ERROR: Could not resolve image ID for $(DockerLocalTag-$(CliName))" >&2
        docker images | head
        exit 1
      fi
      echo "Image digest: $digest"
      echo "##vso[task.setvariable variable=DockerImageDigest-$(CliName);isOutput=true]$digest"
      echo "Saving image"
      docker save "$(DockerLocalTag-$(CliName))" -o "$(Build.ArtifactStagingDirectory)/$(CliName)-image.tar"
      ls -lh "$(Build.ArtifactStagingDirectory)/$(CliName)-image.tar"
    displayName: Capture image digest and save as .tar

  - task: 1ES.PublishPipelineArtifact@1
    displayName: Publish Docker artifacts
    inputs:
      path: $(Build.ArtifactStagingDirectory)
      artifact: docker_output