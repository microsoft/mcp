parameters:
- name: Matrix
  type: object
- name: MaxParallel
  type: number
- name: TimeoutInMinutes
  type: number

jobs:
- job: LiveTest
  displayName: "Live tests -"
  timeoutInMinutes: ${{ parameters.TimeoutInMinutes }}
  # The variable reference in the matrix parameter will resolve to a json map. If there are no live test legs, it will be an empty map.
  condition: and(succeeded(), ne(${{ parameters.Matrix }}, '{}'))
  strategy:
    maxParallel: ${{ parameters.MaxParallel }}
    matrix: $[ ${{ parameters.Matrix }} ]
  steps:
  - checkout: self

  - task: UseDotNet@2
    displayName: "Use .NET SDK from global.json"
    retryCountOnTaskFailure: 3
    inputs:
      useGlobalJson: true

  - task: UseDotNet@2
    displayName: "Use .NET SDK 9.0.x"
    retryCountOnTaskFailure: 3
    inputs:
      packageType: sdk
      version: 9.0.x

  - task: NodeTool@0
    displayName: "Install Node.js 22"
    inputs:
      versionSpec: '22.x'

  - pwsh: >
      ./eng/scripts/Build-Local.ps1
      -VerifyNpx
    displayName: "Build local package"
    workingDirectory: $(Build.SourcesDirectory)

  - pwsh: >
      ./eng/scripts/Test-Code.ps1
      -TestType 'Live'
      -Path $(PathToTest)
      -OnlyBuild
    displayName: "Confirm tests build"
    workingDirectory: $(Build.SourcesDirectory)

  - template: /eng/common/TestResources/build-test-resource-config.yml
    parameters:
      EnvVars:
        Pool: $(Pool)

  - template: /eng/common/TestResources/deploy-test-resources.yml
    parameters:
      ServiceConnection: azure-sdk-tests-public
      PersistOidcToken: true
      TestResourcesDirectory: $(Build.SourcesDirectory)/$(TestResourcesPath)

  - task: AzurePowershell@5
    displayName: "Run tests - az pwsh"
    env:
      AZURE_TEST_MODE: 'live'
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
      AZURE_MCP_COLLECT_TELEMETRY: 'false'
    inputs:
      azureSubscription: azure-sdk-tests-public
      azurePowerShellVersion: 'LatestVersion'
      scriptType: InlineScript
      Inline: |
        ./eng/scripts/Test-Code.ps1 `
          -TestType 'Live' `
          -Path $(PathToTest) `
          -TestResultsPath '$(Build.ArtifactStagingDirectory)/testResults'

        exit $LastExitCode
      pwsh: true
      workingDirectory: $(Build.SourcesDirectory)

  - task: PublishTestResults@2
    condition: succeededOrFailed()
    displayName: "Publish Results"
    inputs:
      testResultsFiles: "$(Build.ArtifactStagingDirectory)/testResults/*.trx"
      testRunTitle: "live - $(PathToTest)"
      testResultsFormat: "VSTest"
      mergeTestResults: true

  - template: /eng/common/TestResources/remove-test-resources.yml
    parameters:
      ServiceConnection: azure-sdk-tests-public
      EnvVars:
        Pool: $(Pool)
